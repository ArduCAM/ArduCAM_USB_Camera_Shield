;**************************************************************************************/
; ----- camera parameter -----
; [camera parameter]	Camera parameter set for USB2.0 & USB3.0 mode
;
; -- Keyname description:
; CFG_MODE  = set the config mode for camera: 0 -> User define(UI)
;											  1 -> This config File
; TYPE      = set the name of the camera module
; SIZE		= set the width and height of the image generated by camera 
; BIT_WIDTH = set the bit width of the image generated by camera 
; FORMAT    = set the format of the image generated by camera:
;				| 0 -> RAW	  | 1 -> RGB565  | 2 -> YUV422   | 3 -> JPG  | 4 -> MONO  | 5 -> ST_RAW	| 6 -> ST_MONO |  
;				| -- 0 -> RG  | -- 0 -> RGB  | -- 0 -> YUYV  |           | 			  | -- 0 -> RG  | 			   |  
;				| -- 1 -> GR  | -- 1 -> BGR  | -- 1 -> YVYU  |           | 			  | -- 1 -> GR  | 			   |  
;				| -- 2 -> GB  |              | -- 2 -> UYVY  |           |			  | -- 2 -> GB  |			   |  
;				| -- 3 -> BG  |              | -- 3 -> VYUY  |           | 			  | -- 3 -> BG  | 			   |  
; I2C_MODE  = set the bit width of the address and data of I2C communication: 
;				0 ->  8 bit address &  8 bit value				
;				1 ->  8 bit address & 16 bit value
;				2 -> 16 bit address &  8 bit value
;				3 -> 16 bit address & 16 bit value		
; I2C_ADDR  = set the I2C address for register config of camera 
; G_GAIN    = set the address for green1_gain register config of camera	( RAW & RGB565 & ST_RAW mode )
; B_GAIN    = set the address for blue_gain register config of camera	( RAW & RGB565 & ST_RAW mode )
; R_GAIN    = set the address for red_gain register config of camera	( RAW & RGB565 & ST_RAW mode )
; G2_GAIN   = set the address for green2_gain register config of camera	( RAW & ST_RAW mode )
; Y_GAIN    = set the address for Y_gain register config of camera		( YUV422 mode )
; U_GAIN    = set the address for U_gain register config of camera		( YUV422 mode )
; V_GAIN    = set the address for V_gain register config of camera		( YUV422 mode )
; GL_GAIN   = set the address for global_gain register config of camera
; 
; -- Keyname format:
; CFG_MODE  = <value1>							;<comment>
; TYPE      = <value1>
; SIZE		= <width>, <height>
; BIT_WIDTH = <bitWidth>
; FORMAT    = <value1>[, <value2>]
; I2C_MODE  = <value1>
; I2C_ADDR  = <i2cAddress> 
; G_GAIN    = [<page>,] <address>, <minValue>, <maxValue>
; B_GAIN    = [<page>,] <address>, <minValue>, <maxValue>
; R_GAIN    = [<page>,] <address>, <minValue>, <maxValue>
; G2_GAIN   = [<page>,] <address>, <minValue>, <maxValue>
; Y_GAIN    = [<page>,] <address>, <minValue>, <maxValue>
; U_GAIN    = [<page>,] <address>, <minValue>, <maxValue>
; V_GAIN    = [<page>,] <address>, <minValue>, <maxValue>
; GL_GAIN   = [<page>,] <address>, <minValue>, <maxValue>
; 
; <valueN>		Index value representing certain meanings 
; <width>		Width of the image generated by camera
; <height>		Height of the image generated by camera
; <bitWidth>	Bit width of the image generated by camera
; <i2cAddress>	I2C address for register config of camera
; <page>        Optional address space for this register. Some sensors (mostly SOC's)
;               have multiple register pages (see the sensor spec or developers guide)
; <address>     The register address 
; <minValue>	Minimale value of certain address
; <maxValue>	Maximale value of certain address
; <comment>    	Some form of C-style comments are supported in this .cfg file
; 
;**************************************************************************************/
[camera parameter]
CFG_MODE  = 0	
TYPE      = AR0234
SIZE      = 1920, 1200
BIT_WIDTH = 10 
FORMAT    = 0, 2	
I2C_MODE  = 3					
I2C_ADDR  = 0x20	
;TRANS_LVL = 64	

;**************************************************************************************/
; ----- board parameter -----
;[board parameter]					Board parameter set for USB2.0 & USB3.0 mode	
;[board parameter][dev2]			Board parameter set for USB2.0 mode
;[board parameter][dev3][inf2]		Board parameter set for USB3.0 mode and USB2.0 interface
;[board parameter][dev3][inf3]		Board parameter set for USB3.0 mode and USB3.0 interface
;
; -- Keyname description:
; VRCMD = set board parameter by vendor command 
; 
; -- Keyname format:
; VRCMD = <command>, <value>, <index>, <dataNumber>[, <data1>[, <data2>[, <data3>[, <data4>]]]] 		//<comment>
;
; <command>    Value representing certain command 
; <value>      value representing certain meanings
; <index>      Index representing certain meanings   
; <dataNumber> Number of <dataN>
; <dataN>      Data representing certain meanings
; <comment>    Some form of C-style comments are supported in this .cfg file
;
;**************************************************************************************/
[board parameter]
VRCMD = 0xD7, 0x4600, 0x0100, 1, 0x85
VRCMD = 0xD7, 0x4600, 0x0200, 1, 0x00
VRCMD = 0xD7, 0x4600, 0x0300, 1, 0xC0
VRCMD = 0xD7, 0x4600, 0x0300, 1, 0x40
VRCMD = 0xD7, 0x4600, 0x0400, 1, 0x00
VRCMD = 0xD7, 0x4600, 0x0A00, 1, 0x01
VRCMD = 0xD7, 0x4600, 0x0C00, 1, 0x00
VRCMD = 0xD7, 0x4600, 0x0D00, 1, 0x07
VRCMD = 0xD7, 0x4600, 0x0E00, 1, 0x80
VRCMD = 0xD7, 0x4600, 0x0F00, 1, 0x04
VRCMD = 0xD7, 0x4600, 0x1000, 1, 0xB0
VRCMD = 0xD7, 0x4600, 0x2300, 1, 0x80


[board parameter][dev2]
VRCMD = 0xF6, 0x0000, 0x0000, 3, 0x03, 0x04, 0x0C

[board parameter][dev3][inf2]
VRCMD = 0xD7, 0x4600, 0x0300, 1, 0x00
VRCMD = 0xD7, 0x4600, 0x0400, 1, 0x00
VRCMD = 0xF3, 0x0000, 0x0000, 0
VRCMD = 0xF9, 0x0004, 0x0000, 0

[board parameter][dev3][inf3]
VRCMD = 0xD7, 0x4600, 0x0300, 1, 0x00
VRCMD = 0xD7, 0x4600, 0x0400, 1, 0x00
VRCMD = 0xF3, 0x0000, 0x0000, 0
VRCMD = 0xF9, 0x0004, 0x0000, 0

;**************************************************************************************/
; ----- register parameter -----
;
; -- Keyname description:
; REG    = assign a new register value
; DELAY  = delay a certain amount of milliseconds before continuing
; BITSET = do a set operation to part of a register. The part is defined as a mask.
; BITCLR = do a reset operation to part of a register. The part is defined as a mask.
;
; -- Keyname format:
; REG    = [<page>,] <address>, <value>             //<comment>
; DELAY  = <milliseconds>
; BITSET = [<page>,] <address>, <mask>
; BITCLR = [<page>,] <address>, <mask>
;
; <page>         Optional address space for this register. Some sensors (mostly SOC's)
;                have multiple register pages (see the sensor spec or developers guide)
; <address>      the register address
; <value>        the new value to assign to the register
; <mask>         is the part of a register value that needs to be updated with a new value
; <milliseconds> wait for this ammount of milliseconds before continuing 
; <comment>      Some form of C-style comments are supported in this .cfg file
;
;**************************************************************************************/
[register parameter]

//-------------------------------------------------------------//
//[Demo Initialization]
//LOAD= Demo Initialization Message
//[HIDDEN: Demo Initialization Message]
//PROMPT= "Select the sensor interface.  
//Do not skip:","Parallel (Default: 2M 30fps)",LOAD= Full Resolution 1920x1200@30fps Extclk27MHz - Parallel,
//"MIPI - 4 Lane (Default: 2M 120fps)",LOAD= Full Resolution 1920x1200@120fps Extclk27MHz 900Mbps MIPI 4Lane

//-------------------------------------------------------------//
//[Full Resolution 1920x1200@30fps Extclk27MHz - Parallel]

//-------------------------------------------------------------//
//LOAD= Reset
//[Reset]
//STATE= Sensor Reset, 1
//DELAY= 200
//STATE= Sensor Reset, 0
//FIELD_WR=  RESET_REGISTER, 0x00D9	//REG= 0x301A, 0x00D9
REG= 0x301A, 0x00D9
DELAY= 100

//LOAD=1D-DDC_Parameters // load 1DDC parameters 
//[1D-DDC_Parameters] 
REG = 0x3F4C, 0x121F    // RESERVED
REG = 0x3F4E, 0x121F    // RESERVED
REG = 0x3F50, 0x0B81    // RESERVED

//BITFIELD     =     0x31E0,    0x0003, 3  // pix_def_id
REG = 0x31E0, 0x0003
//BITFIELD     =     0x31E0,    0x000C, 0  // pix_def_id
REG = 0x31E0, 0x0003
//BITFIELD = 0x30B0, 0x0010, 0	  // digital_test
REG = 0x30B0, 0x0028
//-------------------------------------------------------------//
DELAY= 100
//XMCLK= 27000000
//FIELD_WR= RESET_REGISTER, 0x30D8	//REG= 0x301A, 0x30D8
REG= 0x301A, 0x30D8
//-------------------------------------------------------------//
//LOAD= AR0234CS Sequencer-brt_spots_ablo_gnd_11feb19
//[AR0234CS Sequencer-brt_spots_ablo_gnd_11feb19] 
//generated automatically by Perl seq2ini2 script
//from file sequence_gs_ar0234.i
//Sub sequence_gs_ar0234_brt_spots_ablo_gnd_11feb19()
//REG= 0x301A, 0x0059 

REG= 0x3088, 0x8000 
REG= 0x3086, 0xC1AE 
REG= 0x3086, 0x327F 
REG= 0x3086, 0x5780 
REG= 0x3086, 0x272F 
REG= 0x3086, 0x7416 
REG= 0x3086, 0x7E13 
REG= 0x3086, 0x8000 
REG= 0x3086, 0x307E 
REG= 0x3086, 0xFF80 
REG= 0x3086, 0x20C3 
REG= 0x3086, 0xB00E 
REG= 0x3086, 0x8190 
REG= 0x3086, 0x1643 
REG= 0x3086, 0x1651 
REG= 0x3086, 0x9D3E 
REG= 0x3086, 0x9545 
REG= 0x3086, 0x2209 
REG= 0x3086, 0x3781 
REG= 0x3086, 0x9016 
REG= 0x3086, 0x4316 
REG= 0x3086, 0x7F90 
REG= 0x3086, 0x8000 
REG= 0x3086, 0x387F 
REG= 0x3086, 0x1380 
REG= 0x3086, 0x233B 
REG= 0x3086, 0x7F93 
REG= 0x3086, 0x4502 
REG= 0x3086, 0x8000 
REG= 0x3086, 0x7FB0 
REG= 0x3086, 0x8D66 
REG= 0x3086, 0x7F90 
REG= 0x3086, 0x8192 
REG= 0x3086, 0x3C16 
REG= 0x3086, 0x357F 
REG= 0x3086, 0x9345 
REG= 0x3086, 0x0280 
REG= 0x3086, 0x007F 
REG= 0x3086, 0xB08D 
REG= 0x3086, 0x667F 
REG= 0x3086, 0x9081 
REG= 0x3086, 0x8237 
REG= 0x3086, 0x4502 
REG= 0x3086, 0x3681 
REG= 0x3086, 0x8044 
REG= 0x3086, 0x1631 
REG= 0x3086, 0x4374 
REG= 0x3086, 0x1678 
REG= 0x3086, 0x7B7D 
REG= 0x3086, 0x4502 
REG= 0x3086, 0x450A 
REG= 0x3086, 0x7E12 
REG= 0x3086, 0x8180 
REG= 0x3086, 0x377F 
REG= 0x3086, 0x1045 
REG= 0x3086, 0x0A0E 
REG= 0x3086, 0x7FD4 
REG= 0x3086, 0x8024 
REG= 0x3086, 0x0E82 
REG= 0x3086, 0x9CC2 
REG= 0x3086, 0xAFA8 
REG= 0x3086, 0xAA03 
REG= 0x3086, 0x430D 
REG= 0x3086, 0x2D46 
REG= 0x3086, 0x4316 
REG= 0x3086, 0x5F16 
REG= 0x3086, 0x530D 
REG= 0x3086, 0x1660 
REG= 0x3086, 0x401E 
REG= 0x3086, 0x2904 
REG= 0x3086, 0x2984 
REG= 0x3086, 0x81E7 
REG= 0x3086, 0x816F 
REG= 0x3086, 0x1706 
REG= 0x3086, 0x81E7 
REG= 0x3086, 0x7F81 
REG= 0x3086, 0x5C0D 
REG= 0x3086, 0x5754 
REG= 0x3086, 0x495F 
REG= 0x3086, 0x5305 
REG= 0x3086, 0x5307 
REG= 0x3086, 0x4D2B 
REG= 0x3086, 0xF810 
REG= 0x3086, 0x164C 
REG= 0x3086, 0x0755 
REG= 0x3086, 0x562B 
REG= 0x3086, 0xB82B 
REG= 0x3086, 0x984E 
REG= 0x3086, 0x1129 
REG= 0x3086, 0x9460 
REG= 0x3086, 0x5C09 
REG= 0x3086, 0x5C1B 
REG= 0x3086, 0x4002 
REG= 0x3086, 0x4500 
REG= 0x3086, 0x4580 
REG= 0x3086, 0x29B6 
REG= 0x3086, 0x7F80 
REG= 0x3086, 0x4004 
REG= 0x3086, 0x7F88 
REG= 0x3086, 0x4109 
REG= 0x3086, 0x5C0B 
REG= 0x3086, 0x29B2 
REG= 0x3086, 0x4115 
REG= 0x3086, 0x5C03 
REG= 0x3086, 0x4105 
REG= 0x3086, 0x5F2B 
REG= 0x3086, 0x902B 
REG= 0x3086, 0x8081 
REG= 0x3086, 0x6F40 
REG= 0x3086, 0x1041 
REG= 0x3086, 0x0160 
REG= 0x3086, 0x29A2 
REG= 0x3086, 0x29A3 
REG= 0x3086, 0x5F4D 
REG= 0x3086, 0x1C17 
REG= 0x3086, 0x0281 
REG= 0x3086, 0xE729 
REG= 0x3086, 0x8345 
REG= 0x3086, 0x8840 
REG= 0x3086, 0x0F7F 
REG= 0x3086, 0x8A40 
REG= 0x3086, 0x2345 
REG= 0x3086, 0x8024 
REG= 0x3086, 0x4008 
REG= 0x3086, 0x7F88 
REG= 0x3086, 0x5D29 
REG= 0x3086, 0x9288 
REG= 0x3086, 0x102B 
REG= 0x3086, 0x0489 
REG= 0x3086, 0x165C 
REG= 0x3086, 0x4386 
REG= 0x3086, 0x170B 
REG= 0x3086, 0x5C03 
REG= 0x3086, 0x8A48 
REG= 0x3086, 0x4D4E 
REG= 0x3086, 0x2B80 
REG= 0x3086, 0x4C09 
REG= 0x3086, 0x4119 
REG= 0x3086, 0x816F 
REG= 0x3086, 0x4110 
REG= 0x3086, 0x4001 
REG= 0x3086, 0x6029 
REG= 0x3086, 0x8229 
REG= 0x3086, 0x8329 
REG= 0x3086, 0x435C 
REG= 0x3086, 0x055F 
REG= 0x3086, 0x4D1C 
REG= 0x3086, 0x81E7 
REG= 0x3086, 0x4502 
REG= 0x3086, 0x8180 
REG= 0x3086, 0x7F80 
REG= 0x3086, 0x410A 
REG= 0x3086, 0x9144 
REG= 0x3086, 0x1609 
REG= 0x3086, 0x2FC3 
REG= 0x3086, 0xB130 
REG= 0x3086, 0xC3B1 
REG= 0x3086, 0x0343 
REG= 0x3086, 0x164A 
REG= 0x3086, 0x0A43 
REG= 0x3086, 0x160B 
REG= 0x3086, 0x4316 
REG= 0x3086, 0x8F43 
REG= 0x3086, 0x1690 
REG= 0x3086, 0x4316 
REG= 0x3086, 0x7F81 
REG= 0x3086, 0x450A 
REG= 0x3086, 0x410F 
REG= 0x3086, 0x7F83 
REG= 0x3086, 0x5D29 
REG= 0x3086, 0x4488 
REG= 0x3086, 0x102B 
REG= 0x3086, 0x0453 
REG= 0x3086, 0x0D40 
REG= 0x3086, 0x2345 
REG= 0x3086, 0x0240 
REG= 0x3086, 0x087F 
REG= 0x3086, 0x8053 
REG= 0x3086, 0x0D89 
REG= 0x3086, 0x165C 
REG= 0x3086, 0x4586 
REG= 0x3086, 0x170B 
REG= 0x3086, 0x5C05 
REG= 0x3086, 0x8A60 
REG= 0x3086, 0x4B91 
REG= 0x3086, 0x4416 
REG= 0x3086, 0x09C1 
REG= 0x3086, 0x2CA9 
REG= 0x3086, 0xAB30 
REG= 0x3086, 0x51B3 
REG= 0x3086, 0x3D5A 
REG= 0x3086, 0x7E3D 
REG= 0x3086, 0x7E19 
REG= 0x3086, 0x8000 
REG= 0x3086, 0x8B1F 
REG= 0x3086, 0x2A1F 
REG= 0x3086, 0x83A2 
REG= 0x3086, 0x7516 
REG= 0x3086, 0xAD33 
REG= 0x3086, 0x450A 
REG= 0x3086, 0x7F53 
REG= 0x3086, 0x8023 
REG= 0x3086, 0x8C66 
REG= 0x3086, 0x7F13 
REG= 0x3086, 0x8184 
REG= 0x3086, 0x1481 
REG= 0x3086, 0x8031 
REG= 0x3086, 0x3D64 
REG= 0x3086, 0x452A 
REG= 0x3086, 0x9451 
REG= 0x3086, 0x9E96 
REG= 0x3086, 0x3D2B 
REG= 0x3086, 0x3D1B 
REG= 0x3086, 0x529F 
REG= 0x3086, 0x0E3D 
REG= 0x3086, 0x083D 
REG= 0x3086, 0x167E 
REG= 0x3086, 0x307E 
REG= 0x3086, 0x1175 
REG= 0x3086, 0x163E 
REG= 0x3086, 0x970E 
REG= 0x3086, 0x82B2 
REG= 0x3086, 0x3D7F 
REG= 0x3086, 0xAC3E 
REG= 0x3086, 0x4502 
REG= 0x3086, 0x7E11 
REG= 0x3086, 0x7FD0 
REG= 0x3086, 0x8000 
REG= 0x3086, 0x8C66 
REG= 0x3086, 0x7F90 
REG= 0x3086, 0x8194 
REG= 0x3086, 0x3F44 
REG= 0x3086, 0x1681 
REG= 0x3086, 0x8416 
REG= 0x3086, 0x2C2C 
REG= 0x3086, 0x2C2C 
//-------------------------------------------------------------//
//LOAD= RECOMMENDED_SETTINGS-Pxlclk22.5MHz
//[RECOMMENDED_SETTINGS-Pxlclk22.5MHz]  
//parallel or other modes with 22.5MHz
REG= 0x3088, 0x8050    // Address of Sequencer RAM
REG= 0x3086, 0x9237    // Value

REG= 0x3044, 0x0410   // RESERVED
REG= 0x3094, 0x03D4   // RESERVED
REG= 0x3096, 0x0280    // RESERVED
REG= 0x30B0, 0x0028   // digital_test
REG= 0x30BA, 0x7606   // RESERVED
REG= 0x30FE, 0x002A 
REG= 0x31DE, 0x0410   // RESERVED

REG= 0x3ED6, 0x1435   // RESERVED
REG= 0x3ED8, 0x9865   // RESERVED
REG= 0x3EDA, 0x7698   // RESERVED
REG= 0x3EDC, 0x99FF   // RESERVED
REG= 0x3EE2, 0xBB88   // RESERVED
REG= 0x3EE4, 0x8836   // RESERVED

REG= 0x3EF0, 0x1CF0   // RESERVED
REG= 0x3EF2, 0x0000   // RESERVED
REG= 0x3EF8, 0x6166   // RESERVED
REG= 0x3EFA, 0x3333   // RESERVED
REG= 0x3EFC, 0x6634   // RESERVED

REG= 0x3088, 0x81BA
REG= 0x3086, 0x3D02	
REG= 0x3276, 0x05DC   // RESERVED
REG= 0x3F00, 0x9D05     // RESERVED
//BITFIELD= 0x3ED2, 0x0300, 0x2  // RESERVED
REG = 0x3ED2, 0Xfa96 
REG= 0x3EEE, 0xA4FE  // RESERVED
//BITFIELD= 0x3ECC, 0x0003, 0x2                  // RESERVED
REG = 0x3ECC, 0x0C42
//BITFIELD= 0x3ECC, 0xE000, 0x0                  // RESERVED
REG = 0x3ECC, 0x0C42

//-------------------------------------//
//LOAD = Rowbanding_Settings
//[Rowbanding_Settings]
REG= 0x3EEC, 0x0C0C        // RESERVED
REG= 0x3EE8, 0xAAE4        // RESERVED

//BITFIELD= 0x3EE6, 0x000F, 0x3  // RESERVED
REG = 0x3EE6, 0x3363
//BITFIELD= 0x3EE6, 0x00F0, 0x6  // RESERVED
REG = 0x3EE6, 0x3363
//BITFIELD= 0x3EE8, 0x0F00, 0xA  // RESERVED
REG = 0x3EE6, 0x3A63
//BITFIELD= 0x3EE8, 0xF000, 0xA  // RESERVED
REG = 0x3EE6, 0xAA63
//-------------------------------------//
//LOAD = Gain Table 22.5MHz
//-------------------------------------//
//FIELD_WR= DELTA_DK_CONTROL, delta_dk_every_frame, 1
REG = 0x3180, C24F

//FIELD_WR= AE_LUMA_TARGET_REG, 0x5000	//REG= R0x3102, 0x5000
REG= R0x3102, 0x5000

//BITFIELD= 0x3060, 0x007F, 0x0D	// set analog gain to minimum analog gain x1.684
REG = 0x3060, 0x000D
//-------------------------------------//
//LOAD = AutoExposure Maximum Analog Gain 16x
//[AutoExposure Maximum Analog Gain 16x]
//BITFIELD= 0x3ED0, 0x00FF, 0x44  // RESERVED
REG = 0x3ED0, 0xFF44
//BITFIELD= 0x3ED2, 0xFF00, 0xAA	  // RESERVED
REG = 0x3ED2, 0xAA96
//BITFIELD= 0x3ED4, 0xFF00, 0x03	  // RESERVED
REG = 0x3ED4, 0x031F
REG = 0x3EEE, 0xA4AA  // RESERVED
//-------------------------------------------------------------//
//LOAD= 1920x1200_Parallel@30fps
//[hidden: 1920x1200_Parallel@30fps]          //cxx3
// PLL settings
REG = 0x302A, 0x0005		//VT_PIX_CLK_DIV = 5
REG = 0x302C, 0x0001		//VT_SYS_CLK_DIV = 1
REG = 0x302E, 0x0003		//PRE_PLL_CLK_DIV = 3
//REG = 0x3030, 0x0032		//PLL_MULTIPLIER = 50
REG = 0x3030, 0x002F		//PLL_MULTIPLIER = 50
REG = 0x3036, 0x000A		//OP_PIX_CLK_DIV = 10
REG = 0x3038, 0x0001		//OP_SYS_CLK_DIV = 1
//BITFIELD = 0x30B0, 0x4000, 0x0000	  // digital_test
REG = 0x30B0, 0x0028

// Timing settings
REG = 0x31AE, 0x0000		//SERIAL_FORMAT = 0
//FIELD_WR= Y_ADDR_START, 0x0008 			// REG= 0x3002, 0x0008
REG= 0x3002, 0x0008
//FIELD_WR= X_ADDR_START, 0x0008 			// REG= 0x3004, 0x0002
REG= 0x3004, 0x0002
//FIELD_WR= Y_ADDR_END, 0x04B7 			// REG= 0x3006, 0x04B7
REG= 0x3006, 0x04B7
//FIELD_WR= X_ADDR_END, 0x0787 			// REG= 0x3008, 0x0781
REG= 0x3008, 0x0781

//FIELD_WR= FRAME_LENGTH_LINES, 0x04C4	 	// REG= 0x300A, 0x04C4
REG= 0x300A, 0x04C4
//FIELD_WR= LINE_LENGTH_PCK, 0x0264 		// REG= 0x300C, 0x0266 // it is 0x0266 multiplied by 4
REG= 0x300C, 0x0264
//FIELD_WR= COARSE_INTEGRATION_TIME, 0x02DC 	// REG= 0x3012, 0x0064
REG= 0x3012, 0x02DC
//FIELD_WR= X_ODD_INC, 0x0001 			// REG= 0x30A2, 0x0001
REG= 0x30A2, 0x0001
//FIELD_WR= Y_ODD_INC, 0x0001 			// REG= 0x30A6, 0x0001
REG= 0x30A6, 0x0001
//FIELD_WR= READ_MODE, 0x0000 			// REG= 0x3040, 0x0000
REG= 0x3040, 0x0000
//-------------------------------------------------------------//
//FIELD_WR= SERIAL_FORMAT, 0x0200
//LOAD= Configure Context B to 2x2 Binning
//LOAD= Enable Embedded Data and Stats
//-------------------------------------------------------------//
//FIELD_WR= ROW_SPEED, 0x0010		//REG= 0x3028, 0x0010
REG= 0x3028, 0x0010
//-------------------------------------------------------------//
//LOAD = Parallel_VDDIO_1.8V
//[Parallel_VDDIO_1.8V]
//FIELD_WR= DATAPATH_SELECT, SLEW_RATE_CTRL_PIXCLK, 5       // write to R00x306E [12:10]=5
REG = 0x306E, 0x5410
//FIELD_WR= DATAPATH_SELECT, SLEW_RATE_CTRL_PARALLEL, 5     // write to R00x306E [12:10]=5
REG = 0x306E, 0xB410
//-------------------------------------------------------------//
//FIELD_WR= RESET_REGISTER, 0x30DC	//REG= 0x301A, 0x30DC
REG= 0x301A, 0x30DC
//-------------------------------------------------------------//

//bit[15]:Vert_Flip
//bit[14]:Horiz_mirror
REG= 0x3040, 0x8000
