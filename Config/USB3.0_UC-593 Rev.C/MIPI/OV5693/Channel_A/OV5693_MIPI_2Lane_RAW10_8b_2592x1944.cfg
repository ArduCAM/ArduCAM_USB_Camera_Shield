;**************************************************************************************/
; ----- camera parameter -----
; [camera parameter]	Camera parameter set for USB2.0 & USB3.0 mode
;
; -- Keyname description:
; CFG_MODE  = set the config mode for camera: 0 -> User define(UI)
;											  1 -> This config File
; TYPE      = set the name of the camera module
; SIZE		= set the width and height of the image generated by camera 
; BIT_WIDTH = set the bit width of the image generated by camera 
; FORMAT    = set the format of the image generated by camera:
;				| 0 -> RAW	  | 1 -> RGB565  | 2 -> YUV422   | 3 -> JPG  | 4 -> MONO  | 5 -> ST_RAW	| 6 -> ST_MONO |  
;				| -- 0 -> RG  | -- 0 -> RGB  | -- 0 -> YUYV  |           | 			  | -- 0 -> RG  | 			   |  
;				| -- 1 -> GR  | -- 1 -> BGR  | -- 1 -> YVYU  |           | 			  | -- 1 -> GR  | 			   |  
;				| -- 2 -> GB  |              | -- 2 -> UYVY  |           |			  | -- 2 -> GB  |			   |  
;				| -- 3 -> BG  |              | -- 3 -> VYUY  |           | 			  | -- 3 -> BG  | 			   |  
; I2C_MODE  = set the bit width of the address and data of I2C communication: 
;				0 ->  8 bit address &  8 bit value				
;				1 ->  8 bit address & 16 bit value
;				2 -> 16 bit address &  8 bit value
;				3 -> 16 bit address & 16 bit value		
; I2C_ADDR  = set the I2C address for register config of camera 
; G_GAIN    = set the address for green1_gain register config of camera	( RAW & RGB565 & ST_RAW mode )
; B_GAIN    = set the address for blue_gain register config of camera	( RAW & RGB565 & ST_RAW mode )
; R_GAIN    = set the address for red_gain register config of camera	( RAW & RGB565 & ST_RAW mode )
; G2_GAIN   = set the address for green2_gain register config of camera	( RAW & ST_RAW mode )
; Y_GAIN    = set the address for Y_gain register config of camera		( YUV422 mode )
; U_GAIN    = set the address for U_gain register config of camera		( YUV422 mode )
; V_GAIN    = set the address for V_gain register config of camera		( YUV422 mode )
; GL_GAIN   = set the address for global_gain register config of camera
; 
; -- Keyname format:
; CFG_MODE  = <value1>							;<comment>
; TYPE      = <value1>
; SIZE		= <width>, <height>
; BIT_WIDTH = <bitWidth>
; FORMAT    = <value1>[, <value2>]
; I2C_MODE  = <value1>
; I2C_ADDR  = <i2cAddress> 
; G_GAIN    = [<page>,] <address>, <minValue>, <maxValue>
; B_GAIN    = [<page>,] <address>, <minValue>, <maxValue>
; R_GAIN    = [<page>,] <address>, <minValue>, <maxValue>
; G2_GAIN   = [<page>,] <address>, <minValue>, <maxValue>
; Y_GAIN    = [<page>,] <address>, <minValue>, <maxValue>
; U_GAIN    = [<page>,] <address>, <minValue>, <maxValue>
; V_GAIN    = [<page>,] <address>, <minValue>, <maxValue>
; GL_GAIN   = [<page>,] <address>, <minValue>, <maxValue>
; 
; <valueN>		Index value representing certain meanings 
; <width>		Width of the image generated by camera
; <height>		Height of the image generated by camera
; <bitWidth>	Bit width of the image generated by camera
; <i2cAddress>	I2C address for register config of camera
; <page>        Optional address space for this register. Some sensors (mostly SOC's)
;               have multiple register pages (see the sensor spec or developers guide)
; <address>     The register address 
; <minValue>	Minimale value of certain address
; <maxValue>	Maximale value of certain address
; <comment>    	Some form of C-style comments are supported in this .cfg file
; 
;**************************************************************************************/
[camera parameter]
CFG_MODE  = 0	
TYPE      = OV5693							
SIZE      = 2592, 1944
BIT_WIDTH = 8 
FORMAT    = 0, 0
I2C_MODE  = 2					
I2C_ADDR  = 0x6C		


;**************************************************************************************/
; ----- control parameter -----
;
; -- Keyname description:
; MIN_VALUE = set min value of control.
; MAX_VALUE = set max value of control.
; STEP = set step.
; DEF = set default control value.
; CTRL_NAME = set ctrl name.
; FUNC_NAME = set ctrl function name.
; ======CODE_BLOCK_START======  Code block start flag
; ======CODE_BLOCK_END======    Code block end flag
;
; -- Keyname format:
; MIN_VALUE = <int>
; MAX_VALUE = <int>
; STEP = <int>
; DEF = <int>
; CTRL_NAME = <string>
; FUNC_NAME = <string>
; ======CODE_BLOCK_START======
;   some lua code here
; ======CODE_BLOCK_END======
;
;**************************************************************************************/
[control parameter]
MIN_VALUE   = 2
MAX_VALUE   = 30
STEP        = 1
DEF 		= 30
CTRL_NAME	= Framerate
FUNC_NAME	= setFramerate
======CODE_BLOCK_START======
function setFramerate(val)
    local pix_clk_hz = 162000000
    local hts = 2722
    local vts =  math.floor(pix_clk_hz/(hts*val))
	writeReg(0x380E, (vts & 0xFF00) >> 8)
    writeReg(0x380F, (vts & 0x00FF) >> 0)
end
======CODE_BLOCK_END======

[control parameter]
MIN_VALUE   = 17
MAX_VALUE   = 33000
STEP        = 1
DEF         = 33067
CTRL_NAME   = Exp(us)
FUNC_NAME   = setExposureTime
======CODE_BLOCK_START======
function setExposureTime(val)
    local line_length = 2722
    local pix_clk_hz = 162000000
    local coarse_time = math.floor(val*1000/(line_length/pix_clk_hz*1e9))
    ret = writeReg(0x3500, (coarse_time & 0xF000) >> 12)
	ret = writeReg(0x3501, (coarse_time & 0x0FF0) >> 4)
    ret = writeReg(0x3502, (coarse_time & 0x000f) << 4)
end
======CODE_BLOCK_END======

[control parameter]
MIN_VALUE   = 5
MAX_VALUE   = 3000
STEP        = 1
DEF         = 1968
CTRL_NAME   = Exposure
FUNC_NAME   = setExposure
======CODE_BLOCK_START======
function setExposure(val)
    ret = writeReg(0x3500, (val & 0xF000) >> 12)
	ret = writeReg(0x3501, (val & 0x0FF0) >> 4)
    ret = writeReg(0x3502, (val & 0x000F) << 4)
end
======CODE_BLOCK_END======

[control parameter]
MIN_VALUE   = 1
MAX_VALUE   = 62
STEP        = 1
DEF         = 4
CTRL_NAME   = Gain
FUNC_NAME   = setGain
======CODE_BLOCK_START======
function setGain(val)
	ret = writeReg(0x350A, (val & 0x3F) >> 4)
	ret = writeReg(0x350B, (val & 0x0F) << 4)
end
======CODE_BLOCK_END======

[control parameter]
MIN_VALUE   = 100
MAX_VALUE   = 6200
STEP        = 1
DEF 		= 400
CTRL_NAME	= Gain(0.01x)
FUNC_NAME	= setAnalogueGain
======CODE_BLOCK_START======
function setAnalogueGain(val)
    local integer = math.floor(val / 100)
	local fract = math.floor((val / 100.0) * 16)
	ret = writeReg(0x350A, (integer & 0x3F) >> 4)
	ret = writeReg(0x350B, (integer & 0x0F) << 4 | fract)
end
======CODE_BLOCK_END======
;**************************************************************************************/
; ----- board parameter -----
;[board parameter]					Board parameter set for USB2.0 & USB3.0 mode	
;[board parameter][dev2]			Board parameter set for USB2.0 mode
;[board parameter][dev3][inf2]		Board parameter set for USB3.0 mode and USB2.0 interface
;[board parameter][dev3][inf3]		Board parameter set for USB3.0 mode and USB3.0 interface
;
; -- Keyname description:
; VRCMD = set board parameter by vendor command 
; 
; -- Keyname format:
; VRCMD = <command>, <value>, <index>, <dataNumber>[, <data1>[, <data2>[, <data3>[, <data4>]]]] 		//<comment>
;
; <command>    Value representing certain command 
; <value>      value representing certain meanings
; <index>      Index representing certain meanings   
; <dataNumber> Number of <dataN>
; <dataN>      Data representing certain meanings
; <comment>    Some form of C-style comments are supported in this .cfg file
;
;**************************************************************************************/
[board parameter]
VRCMD = 0xD7, 0x4600, 0x0100, 1, 0x05
VRCMD = 0xD7, 0x4600, 0x0200, 1, 0x00
VRCMD = 0xD7, 0x4600, 0x0300, 1, 0x40
VRCMD = 0xD7, 0x4600, 0x0400, 1, 0x19
VRCMD = 0xD7, 0x4600, 0x0A00, 1, 0x00
VRCMD = 0xD7, 0x4600, 0x0C00, 1, 0x91
VRCMD = 0xD7, 0x4600, 0x0D00, 1, 0x0A
VRCMD = 0xD7, 0x4600, 0x0E00, 1, 0x20
VRCMD = 0xD7, 0x4600, 0x0F00, 1, 0x07
VRCMD = 0xD7, 0x4600, 0x1000, 1, 0x98
VRCMD = 0xD7, 0x4600, 0x1100, 1, 0x07
VRCMD = 0xD7, 0x4600, 0x1400, 1, 0x00
VRCMD = 0xD7, 0x4600, 0x2300, 1, 0x01
VRCMD = 0xD7, 0x4600, 0x2900, 1, 0x00

[board parameter][dev2]
VRCMD = 0xF6, 0x0000, 0x0000, 3, 0x03, 0x04, 0x0C


[board parameter][dev3][inf2]
VRCMD = 0xD7, 0x4600, 0x0400, 1, 0x12
VRCMD = 0xF3, 0x0000, 0x0000, 0
VRCMD = 0xF9, 0x0004, 0x0000, 0

[board parameter][dev3][inf3]
VRCMD = 0xD7, 0x4600, 0x0400, 1, 0x00
VRCMD = 0xF3, 0x0000, 0x0000, 0
VRCMD = 0xF9, 0x0004, 0x0000, 0

;**************************************************************************************/
; ----- register parameter -----
;[register parameter]					Register parameter set for USB2.0 & USB3.0 mode	
;[register parameter][dev2]				Register parameter set for USB2.0 mode
;[register parameter][dev3][inf2]		Register parameter set for USB3.0 mode and USB2.0 interface
;[register parameter][dev3][inf3]		Register parameter set for USB3.0 mode and USB3.0 interface
;
; -- Keyname description:
; REG    = assign a new register value
; DELAY  = delay a certain amount of milliseconds before continuing
;
; -- Keyname format:
; REG    = [<page>,] <address>, <value>             //<comment>
; DELAY  = <milliseconds>
;
; <page>         Optional address space for this register. Some sensors (mostly SOC's)
;                have multiple register pages (see the sensor spec or developers guide)
; <address>      the register address
; <value>        the new value to assign to the register
; <milliseconds> wait for this ammount of milliseconds before continuing 
; <comment>      Some form of C-style comments are supported in this .cfg file
;
;**************************************************************************************/
[register parameter]
;DELAY  = 0x100												 
;REG    = 0x10, 0x00FF
;BITSET = 0x10, 0xF000
;BITCLR = 0x10, 0x8000

//ov5693_global_setting

REG = 0x0103, 0x01      //OV5693_SW_RESET	
DELAY = 100

REG = 0x3001, 0x0a      	
REG = 0x3002, 0x80      	
REG = 0x3006, 0x00      	
REG = 0x3011, 0x21      	
REG = 0x3012, 0x09      	
REG = 0x3013, 0x10      	
REG = 0x3014, 0x00      	
REG = 0x3015, 0x08      	
REG = 0x3016, 0xf0      	
REG = 0x3017, 0xf0      	
REG = 0x3018, 0xf0      	
REG = 0x301b, 0xb4      	
REG = 0x301d, 0x02      	
REG = 0x3021, 0x00      	
REG = 0x3022, 0x01      	
REG = 0x3028, 0x44      	
REG = 0x3098, 0x02      	
REG = 0x3099, 0x19      	
REG = 0x309a, 0x02      	
REG = 0x309b, 0x01      	
REG = 0x309c, 0x00      	
REG = 0x30a0, 0xd2      	
REG = 0x30a2, 0x01      	
REG = 0x30b2, 0x00      	
REG = 0x30b3, 0x7d  
REG = 0x30b4, 0x03  	
REG = 0x30b5, 0x04      	
REG = 0x30b6, 0x01     	
REG = 0x3104, 0x21      	
REG = 0x3106, 0x00      	
REG = 0x3400, 0x04      //OV5693_MWB_RED_GAIN_H   	
REG = 0x3401, 0x00      	
REG = 0x3402, 0x04      //OV5693_MWB_GREEN_GAIN_H		
REG = 0x3403, 0x00      	
REG = 0x3404, 0x04      //OV5693_MWB_BLUE_GAIN_H	
REG = 0x3405, 0x00      	
REG = 0x3406, 0x01      	
REG = 0x3500, 0x00      //OV5693_EXPOSURE_H	
REG = 0x3501, 0x7b      //OV5693_EXPOSURE_M	
REG = 0x3502, 0x00      //OV5693_EXPOSURE_L:Bit[1:0] means Bit[9:8] of gain
REG = 0x3503, 0x07      	
REG = 0x3504, 0x00      	
REG = 0x3505, 0x00      	
REG = 0x3506, 0x00      	
REG = 0x3507, 0x02      	
REG = 0x3508, 0x00      	
REG = 0x3509, 0x10      	
REG = 0x350a, 0x00      //OV5693_AGC_H	
REG = 0x350b, 0x40      //OV5693_AGC_L     :Bit[7:0] of gain
REG = 0x3601, 0x0a      	
REG = 0x3602, 0x38      	
REG = 0x3612, 0x80      	
REG = 0x3620, 0x54      	
REG = 0x3621, 0xc7      	
REG = 0x3622, 0x0f      	
REG = 0x3625, 0x10      	
REG = 0x3630, 0x55      	
REG = 0x3631, 0xf4      	
REG = 0x3632, 0x00      	
REG = 0x3633, 0x34      	
REG = 0x3634, 0x02      	
REG = 0x364d, 0x0d      	
REG = 0x364f, 0xdd      	
REG = 0x3660, 0x04      	
REG = 0x3662, 0x10      	
REG = 0x3663, 0xf1      	
REG = 0x3665, 0x00      	
REG = 0x3666, 0x20      	
REG = 0x3667, 0x00      	
REG = 0x366a, 0x80      	
REG = 0x3680, 0xe0      	
REG = 0x3681, 0x00      	
REG = 0x3700, 0x42      	
REG = 0x3701, 0x14      	
REG = 0x3702, 0xa0      	
REG = 0x3703, 0xd8      	
REG = 0x3704, 0x78      	
REG = 0x3705, 0x02      	
REG = 0x370a, 0x00      	
REG = 0x370b, 0x20      	
REG = 0x370c, 0x0c      	
REG = 0x370d, 0x11      	
REG = 0x370e, 0x00      	
REG = 0x370f, 0x40      	
REG = 0x3710, 0x00      	
REG = 0x371a, 0x1c      	
REG = 0x371b, 0x05      	
REG = 0x371c, 0x01      	
REG = 0x371e, 0xa1      	
REG = 0x371f, 0x0c      	
REG = 0x3721, 0x00      	
REG = 0x3724, 0x10      	
REG = 0x3726, 0x00      	
REG = 0x372a, 0x01      	
REG = 0x3730, 0x10      	
REG = 0x3738, 0x22      	
REG = 0x3739, 0xe5      	
REG = 0x373a, 0x50      	
REG = 0x373b, 0x02      	
REG = 0x373c, 0x41      	
REG = 0x373f, 0x02      	
REG = 0x3740, 0x42      	
REG = 0x3741, 0x02      	
REG = 0x3742, 0x18      	
REG = 0x3743, 0x01      	
REG = 0x3744, 0x02      	
REG = 0x3747, 0x10      	
REG = 0x374c, 0x04      	
REG = 0x3751, 0xf0      	
REG = 0x3752, 0x00      	
REG = 0x3753, 0x00      	
REG = 0x3754, 0xc0      	
REG = 0x3755, 0x00      	
REG = 0x3756, 0x1a      	
REG = 0x3758, 0x00      	
REG = 0x3759, 0x0f      	
REG = 0x376b, 0x44      	
REG = 0x375c, 0x04      	
REG = 0x3774, 0x10      	
REG = 0x3776, 0x00      	
REG = 0x377f, 0x08      	
REG = 0x3780, 0x22      	
REG = 0x3781, 0x0c      	
REG = 0x3784, 0x2c      	
REG = 0x3785, 0x1e      	
REG = 0x378f, 0xf5      	
REG = 0x3791, 0xb0      	
REG = 0x3795, 0x00      	
REG = 0x3796, 0x64      	
REG = 0x3797, 0x11      	
REG = 0x3798, 0x30      	
REG = 0x3799, 0x41      	
REG = 0x379a, 0x07      	
REG = 0x379b, 0xb0      	
REG = 0x379c, 0x0c      	
REG = 0x37c5, 0x00      	
REG = 0x37c6, 0x00      	
REG = 0x37c7, 0x00      	
REG = 0x37c9, 0x00      	
REG = 0x37ca, 0x00      	
REG = 0x37cb, 0x00      	
REG = 0x37de, 0x00      	
REG = 0x37df, 0x00      	
REG = 0x3800, 0x00      //OV5693_HORIZONTAL_START_H :Bit[11:8]	
REG = 0x3801, 0x00      //OV5693_HORIZONTAL_START_L :Bit[7:0]	
REG = 0x3802, 0x00      //OV5693_VERTICAL_START_H	:Bit[11:8]	
REG = 0x3803, 0x00      //OV5693_VERTICAL_START_L   :Bit[7:0]
REG = 0x3804, 0x0a      //OV5693_HORIZONTAL_END_H	:Bit[11:8]
REG = 0x3805, 0x3f      //OV5693_HORIZONTAL_END_L   :Bit[7:0]	
REG = 0x3810, 0x00      	
REG = 0x3812, 0x00      	
REG = 0x3823, 0x00      	
REG = 0x3824, 0x00      	
REG = 0x3825, 0x00      	
REG = 0x3826, 0x00      	
REG = 0x3827, 0x00      	
REG = 0x382a, 0x04      	
REG = 0x3a04, 0x06      	
REG = 0x3a05, 0x14      	
REG = 0x3a06, 0x00      	
REG = 0x3a07, 0xfe      	
REG = 0x3b00, 0x00      	
REG = 0x3b02, 0x00      	
REG = 0x3b03, 0x00      	
REG = 0x3b04, 0x00      	
REG = 0x3b05, 0x00      	
REG = 0x3e07, 0x20      	
REG = 0x4000, 0x08      	
REG = 0x4001, 0x04      	
REG = 0x4002, 0x45      	
REG = 0x4004, 0x08      	
REG = 0x4005, 0x18      	
REG = 0x4006, 0x20      	
REG = 0x4008, 0x24      	
REG = 0x4009, 0x10      	
REG = 0x400c, 0x00      	
REG = 0x400d, 0x00      	
REG = 0x4058, 0x00      	
REG = 0x404e, 0x37      	
REG = 0x404f, 0x8f      	
REG = 0x4058, 0x00      	
REG = 0x4101, 0xb2      	
REG = 0x4303, 0x00      	
REG = 0x4304, 0x08      	
REG = 0x4307, 0x31      	
REG = 0x4311, 0x04      	
REG = 0x4315, 0x01      	
REG = 0x4511, 0x05      	
REG = 0x4512, 0x01      	
REG = 0x4806, 0x00      	
REG = 0x4816, 0x52      	
REG = 0x481f, 0x30      	
REG = 0x4826, 0x2c      	
REG = 0x4831, 0x64      	
REG = 0x4d00, 0x04      	
REG = 0x4d01, 0x71      	
REG = 0x4d02, 0xfd      	
REG = 0x4d03, 0xf5      	
REG = 0x4d04, 0x0c      	
REG = 0x4d05, 0xcc      	
REG = 0x4837, 0x0a      	
REG = 0x5000, 0x06      	
REG = 0x5001, 0x01      	
REG = 0x5003, 0x20      	
REG = 0x5046, 0x0a      	
REG = 0x5013, 0x00      	
REG = 0x5046, 0x0a      	
REG = 0x5780, 0x1c      	
REG = 0x5786, 0x20      	
REG = 0x5787, 0x10      	
REG = 0x5788, 0x18      	
REG = 0x578a, 0x04      	
REG = 0x578b, 0x02      	
REG = 0x578c, 0x02      	
REG = 0x578e, 0x06      	
REG = 0x578f, 0x02      	
REG = 0x5790, 0x02      	
REG = 0x5791, 0xff      	
REG = 0x5842, 0x01      	
REG = 0x5843, 0x2b      	
REG = 0x5844, 0x01      	
REG = 0x5845, 0x92      	
REG = 0x5846, 0x01      	
REG = 0x5847, 0x8f      	
REG = 0x5848, 0x01      	
REG = 0x5849, 0x0c      	
REG = 0x5e00, 0x00      	
REG = 0x5e10, 0x0c      	
REG = 0x0100, 0x00      //OV5693_SW_STREAM


//ov5693_2592x1944_30fps
REG = 0x3501, 0x7b
REG = 0x3502, 0x00
REG = 0x3708, 0xe2
REG = 0x3709, 0xc3
REG = 0x3803, 0x00
REG = 0x3806, 0x07     //OV5693_VERTICAL_END_H  :Bit[11:8]
REG = 0x3807, 0xa3     //OV5693_VERTICAL_END_L  :Bit[7:0]
REG = 0x3808, 0x0a     //OV5693_HORIZONTAL_OUTPUT_SIZE_H  :Bit[3:0]
REG = 0x3809, 0x20     //OV5693_HORIZONTAL_OUTPUT_SIZE_L  :Bit[7:0]
REG = 0x380a, 0x07     //OV5693_VERTICAL_OUTPUT_SIZE_H   :Bit[3:0]
REG = 0x380b, 0x98     //OV5693_VERTICAL_OUTPUT_SIZE_L  Bit[7:0]
REG = 0x380c, 0x0a     //OV5693_TIMING_HTS_H
REG = 0x380d, 0x80     //OV5693_TIMING_HTS_L
REG = 0x380e, 0x07     //OV5693_TIMING_VTS_H
REG = 0x380f, 0xc0     //OV5693_TIMING_VTS_L
REG = 0x3811, 0x10
REG = 0x3813, 0x00
REG = 0x3814, 0x11
REG = 0x3815, 0x11
REG = 0x3820, 0x00
REG = 0x3821, 0x18
REG = 0x5002, 0x00


//sample PLL CONFIG

REG = 0x30b2, 0x00      	
REG = 0x30b3, 0x59  
REG = 0x30b4, 0x03  	
REG = 0x30b5, 0x04      	
REG = 0x30b6, 0x01     	
REG = 0x3080, 0x01
REG = 0x3098, 0x03
REG = 0x3099, 0x1b
REG = 0x309c, 0x00
REG = 0x309a, 0x02         
REG = 0x309b, 0x01 
REG = 0x380c, 0x0A
REG = 0x380d, 0xa2
REG = 0x380e, 0x07    


REG = 0x3404, 0x06 

REG = 0x0100, 0x01


[register parameter][dev3][inf2]


[register parameter][dev3][inf3]


