;**************************************************************************************/
; ----- camera parameter -----
;
; -- Keyname description:
; CFG_MODE  = set the config mode for camera: 0 -> User define(UI)
;											  1 -> This config File
; TYPE      = set the name of the camera module
; VID		= set the Vendor ID of camera
; SIZE		= set the width and height of the image generated by camera 
; BIT_WIDTH = set the bit width of the image generated by camera 
; FORMAT    = set the format of the image generated by camera:
;							 | 0 -> RAW	   | 1 -> RGB565  |	2 -> YUV422   | 3 -> JPG  |
;							 | -- 0 -> RG  | -- 0 -> RGB  | -- 0 -> YUYV  |           |
;							 | -- 1 -> GR  | -- 1 -> BGR  | -- 1 -> YVYU  |           |
;							 | -- 2 -> GB  |              | -- 2 -> UYVY  |           |
;							 | -- 3 -> BG  |              | -- 3 -> VYUY  |           |
; I2C_MODE  = set the bit width of the address and data of I2C communication: 
;																							0 ->  8 bit address &  8 bit value				
;																						  	1 ->  8 bit address & 16 bit value
;																							2 -> 16 bit address &  8 bit value
;																							3 -> 16 bit address & 16 bit value		
; I2C_ADDR  = set the ship address for register config of camera 
; 
; -- Keyname format:
; CFG_MODE  	= <value1>							;<comment>
; TYPE      	= <value1>
; VID			= <vid>
; SIZE			= <width>, <height>
; BIT_WIDTH 	= <bitWidth>
; FORMAT    	= <value1>[, <value2>]
; I2C_MODE  	= <value1>
; I2C_ADDR  	= <i2cAddress> 
;
; <valueN>		Index value representing certain meanings 
; <vid>			Vendor ID of the camera
; <width>		Width of the image generated by camera
; <height>		Height of the image generated by camera
; <bitWidth>	Bit width of the image generated by camera
; <i2cAddress>	Ship address for register config of camera
; <comment>    	Some form of C-style comments are supported in this .cfg file
;
;**************************************************************************************/
[camera parameter]
CFG_MODE  = 0	
TYPE      = IMX219
SIZE      = 6528, 2464 
BIT_WIDTH = 10 
FORMAT    = 0, 1
I2C_MODE  = 2					
I2C_ADDR  = 0x20
;TRANS_LVL = 128


[control parameter]
MIN_VALUE   = 2
MAX_VALUE   = 9
STEP        = 1
DEF 		= 9
CTRL_NAME	= Framerate
FUNC_NAME	= setFramerate
======CODE_BLOCK_START======
function setFramerate(val)
    local pix_clk_hz = 182400000
    -- line_length 0x0162 0x0163
    local hts = 7584
    local vts =  math.floor(pix_clk_hz/(hts*val))
    -- vts 0x0160 0x0161
	writeReg(0x0160, (vts & 0xFF00) >> 8)
    writeReg(0x0161, (vts & 0x00FF) >> 0)
end
======CODE_BLOCK_END======

[control parameter]
MIN_VALUE   = 4
MAX_VALUE   = 65535
STEP        = 1
DEF 		= 1763
CTRL_NAME	= Exposure
FUNC_NAME	= setExposure
======CODE_BLOCK_START======
function setExposure(val)
    -- vts 0x015a 0x015b
	writeReg(0x015a, (val & 0xFF00) >> 8)
    writeReg(0x015b, (val & 0x00FF) >> 0)
end
======CODE_BLOCK_END======

[control parameter]
MIN_VALUE   = 1
MAX_VALUE   = 90900
STEP        = 1
DEF 		= 73303
CTRL_NAME	= Exp(us)
FUNC_NAME	= setExposureTime
======CODE_BLOCK_START======
function setExposureTime(val)
    -- vts 0x015a 0x015b
    local hts = 7584
    local pix_clk_hz = 182400000
    local exp = math.floor(val*1000/(hts/pix_clk_hz*1e9))

	writeReg(0x015a, (exp & 0xFF00) >> 8)
    writeReg(0x015b, (exp & 0x00FF) >> 0)
end
======CODE_BLOCK_END======

[control parameter]
MIN_VALUE   = 0
MAX_VALUE   = 232
STEP        = 1
DEF 		= 205
CTRL_NAME	= Gain
FUNC_NAME	= setGain
======CODE_BLOCK_START======
function setGain(val)
    -- vts 0x0157
	writeReg(0x0157, val)
end
======CODE_BLOCK_END======

[control parameter]
MIN_VALUE   = 100
MAX_VALUE   = 1066
STEP        = 1
DEF 		= 500
CTRL_NAME	= Gain(0.01x)
FUNC_NAME	= setAnalogueGain
======CODE_BLOCK_START======
function setAnalogueGain(val)
    -- vts 0x0157
    local gain = 256 - 256 / (val / 100)
	writeReg(0x0157, gain)
end
======CODE_BLOCK_END======

[control parameter]
MIN_VALUE   = 0
MAX_VALUE   = 1
STEP        = 1
DEF 		= 0
CTRL_NAME	= HFlip
FUNC_NAME	= setHFlip
======CODE_BLOCK_START======
function setHFlip(val)
    -- vts 0x0172
    ret,flip = readReg(0x0172)
    flip = math.floor(flip)
    val = math.floor(val)
	writeReg(0x0172, (flip & 0x02) | (val & 0x01))
end
======CODE_BLOCK_END======

[control parameter]
MIN_VALUE   = 0
MAX_VALUE   = 1
STEP        = 1
DEF 		= 1
CTRL_NAME	= VFlip
FUNC_NAME	= setVFlip
======CODE_BLOCK_START======
function setVFlip(val)
    -- vts 0x0172
    ret,flip = readReg(0x0172)
    flip = math.floor(flip)
    val = math.floor(val)
	writeReg(0x0172, (flip & 0x01) | (val & 0x01) << 1)
end
======CODE_BLOCK_END======
;**************************************************************************************/
; ----- board parameter -----
;
; -- Keyname description:
; VRCMD = set board parameter by vendor command 
; 
; -- Keyname format:
; VRCMD = <command>, <value>, <index>, <dataNumber>[, <data1>[, <data2>[, <data3>[, <data4>]]]] 		//<comment>
;
; <command>     
; <value>      
; <index>         
; <dataNumber>  
; <dataN>      
; <comment>    Some form of C-style comments are supported in this .cfg file
;
;**************************************************************************************/
[board parameter]
VRCMD = 0xD7, 0x4600, 0x0100, 1, 0x85
VRCMD = 0xD7, 0x4600, 0x0200, 1, 0x00
VRCMD = 0xD7, 0x4600, 0x0300, 1, 0xC0
VRCMD = 0xD7, 0x4600, 0x0300, 1, 0x40
VRCMD = 0xD7, 0x4600, 0x0400, 1, 0x12
VRCMD = 0xD7, 0x4600, 0x0A00, 1, 0x01
VRCMD = 0xD7, 0x4600, 0x0C00, 1, 0x91
VRCMD = 0xD7, 0x4600, 0x0D00, 1, 0x07
VRCMD = 0xD7, 0x4600, 0x0E00, 1, 0x80
VRCMD = 0xD7, 0x4600, 0x0F00, 1, 0x04
VRCMD = 0xD7, 0x4600, 0x1000, 1, 0x38
VRCMD = 0xD7, 0x4600, 0x1100, 1, 0x03
VRCMD = 0xD7, 0x4600, 0x2300, 1, 0x01

VRCMD = 0xD7, 0x4800, 0x0100, 1, 0x05
VRCMD = 0xD7, 0x4800, 0x0200, 1, 0x00
VRCMD = 0xD7, 0x4800, 0x0300, 1, 0x80
VRCMD = 0xD7, 0x4800, 0x0300, 1, 0x00
VRCMD = 0xD7, 0x4800, 0x0400, 1, 0x00
VRCMD = 0xD7, 0x4800, 0x0C00, 1, 0x91
VRCMD = 0xD7, 0x4800, 0x0D00, 1, 0x07
VRCMD = 0xD7, 0x4800, 0x0E00, 1, 0x80
VRCMD = 0xD7, 0x4800, 0x0F00, 1, 0x04
VRCMD = 0xD7, 0x4800, 0x1000, 1, 0x38
VRCMD = 0xD7, 0x4800, 0x1100, 1, 0x03
VRCMD = 0xD7, 0x4800, 0x1400, 1, 0x80
VRCMD = 0xD7, 0x4800, 0x2300, 1, 0x01
VRCMD = 0xD7, 0x4800, 0x2400, 1, 0x03
VRCMD = 0xD7, 0x4800, 0x2700, 1, 0x01
VRCMD = 0xD7, 0x4800, 0x2800, 1, 0x01

[board parameter][dev2]
VRCMD = 0xD7, 0x4600, 0x0300, 1, 0x40
VRCMD = 0xD7, 0x4600, 0x0400, 1, 0x12
VRCMD = 0xF6, 0x0000, 0x0000, 3, 0x03, 0x04, 0x0C

[board parameter][dev3][inf2]
VRCMD = 0xD7, 0x4600, 0x0300, 1, 0x00
VRCMD = 0xD7, 0x4600, 0x0400, 1, 0x12
VRCMD = 0xF3, 0x0000, 0x0000, 0
VRCMD = 0xF9, 0x0004, 0x0000, 0

[board parameter][dev3][inf3]
VRCMD = 0xD7, 0x4600, 0x0300, 1, 0x00
VRCMD = 0xD7, 0x4600, 0x0400, 1, 0x00
VRCMD = 0xF3, 0x0000, 0x0000, 0
VRCMD = 0xF9, 0x0004, 0x0000, 0


;**************************************************************************************/
; ----- register parameter -----
;
; -- Keyname description:
; REG    = assign a new register value
; DELAY  = delay a certain amount of milliseconds before continuing
; BITSET = do a set operation to part of a register. The part is defined as a mask.
; BITCLR = do a reset operation to part of a register. The part is defined as a mask.
;
; -- Keyname format:
; REG    = [<page>,] <address>, <value>             //<comment>
; DELAY  = <milliseconds>
; BITSET = [<page>,] <address>, <mask>
; BITCLR = [<page>,] <address>, <mask>
;
; <page>         Optional address space for this register. Some sensors (mostly SOC's)
;                have multiple register pages (see the sensor spec or developers guide)
; <address>      the register address
; <value>        the new value to assign to the register
; <mask>         is the part of a register value that needs to be updated with a new value
; <milliseconds> wait for this ammount of milliseconds before continuing 
; <comment>      Some form of C-style comments are supported in this .cfg file
;
;**************************************************************************************/
[register parameter]
REG = 0x0160, 0x09
REG = 0x0161, 0xd7
REG = 0x0157, 0x00
REG = 0x015a, 0x06
REG = 0x015b, 0xe3
REG = 0x0103, 0x01
REG = 0x0114, 0x01
REG = 0x0128, 0x00
REG = 0x012a, 0x18
REG = 0x012b, 0x00
REG = 0x30eb, 0x05
REG = 0x30eb, 0x0c
REG = 0x300a, 0xff
REG = 0x300b, 0xff
REG = 0x30eb, 0x05
REG = 0x30eb, 0x09
REG = 0x455e, 0x00
REG = 0x471e, 0x4b
REG = 0x4767, 0x0f
REG = 0x4750, 0x14
REG = 0x4540, 0x00
REG = 0x47b4, 0x14
REG = 0x4713, 0x30
REG = 0x478b, 0x10
REG = 0x478f, 0x10
REG = 0x4793, 0x10
REG = 0x4797, 0x0e
REG = 0x479b, 0x0e
REG = 0x0157, 0x00
REG = 0x015a, 0x09
REG = 0x015b, 0xbd
REG = 0x0160, 0x09
REG = 0x0161, 0xc1
REG = 0x0162, 0x1A  //HTS[15:8]
REG = 0x0163, 0x20  //HTS[7:0]
REG = 0x0164, 0x00
REG = 0x0165, 0x08
REG = 0x0166, 0x0c
REG = 0x0167, 0xc7
REG = 0x0168, 0x00
REG = 0x0169, 0x00
REG = 0x016a, 0x09
REG = 0x016b, 0x9f
REG = 0x016c, 0x0c
REG = 0x016d, 0xc0
REG = 0x016e, 0x09
REG = 0x016f, 0xa0
REG = 0x0170, 0x01
REG = 0x0171, 0x01
REG = 0x0174, 0x00
REG = 0x0175, 0x00
REG = 0x018c, 0x0a
REG = 0x018d, 0x0a
REG = 0x0264, 0x00
REG = 0x0265, 0x08
REG = 0x0266, 0x0c
REG = 0x0267, 0xc7
REG = 0x026c, 0x0c
REG = 0x026d, 0xc0
REG = 0x0301, 0x05
REG = 0x0303, 0x01
REG = 0x0304, 0x03
REG = 0x0305, 0x03
REG = 0x0306, 0x00
REG = 0x0307, 0x39
REG = 0x0309, 0x0a
REG = 0x030b, 0x01
REG = 0x030c, 0x00
REG = 0x030d, 0x72
REG = 0x0157, 0x00
REG = 0x015a, 0x06
REG = 0x015b, 0xe3
REG = 0x0160, 0x09
REG = 0x0161, 0xd7
REG = 0x0100, 0x01
REG = 0x0157, 0x3d
REG = 0x0157, 0x69
REG = 0x0157, 0x8b
REG = 0x015a, 0x06
REG = 0x015b, 0xe3
REG = 0x0157, 0x9f
REG = 0x015a, 0x06
REG = 0x015b, 0xe3
REG = 0x0157, 0xa9
REG = 0x015a, 0x06
REG = 0x015b, 0xe3
REG = 0x0157, 0xad
REG = 0x015a, 0x06
REG = 0x015b, 0xe3
REG = 0x0157, 0xb5
REG = 0x015a, 0x06
REG = 0x015b, 0xe3
REG = 0x0157, 0xb9
REG = 0x0157, 0xbd
REG = 0x0157, 0xc1
REG = 0x015a, 0x06
REG = 0x015b, 0xe3
REG = 0x0157, 0xc5
REG = 0x0157, 0xc7
REG = 0x0157, 0xc8
REG = 0x0157, 0xc9
REG = 0x0157, 0xca
REG = 0x0157, 0xcb
REG = 0x0157, 0xcb
REG = 0x0157, 0xcc
REG = 0x0157, 0xcd

REG = 0x0172 , 0x02

[register parameter][dev3][inf2]


[register parameter][dev3][inf3]



