#ifndef _MT9F002_H_
#define _MT9F002_H_

#include "sensor.h"

#ifdef MT9F002
const struct sensor_reg reg_setting_MT9F002[] =
{
	

	//Turn sensor streaming OFF 
	{0x301A, 0x0018},

	//Recommended Register Default Changes 
	{0x3174, 0x8000}, // Reserved
	{0x3ED8, 0x65A5}, // Reserved
	{0x3EDA, 0x2525}, // Reserved
	{0x3ED2, 0xA6F3}, // Reserved
	{0x3ED4, 0xFA64}, // Reserved
	{0x3EFA, 0x6444}, // Reserved

	//Sensor Timing Optimization(Sequencer: SVN 9259
	
	{0x3D00, 0x0435},  
	{0x3D02, 0x435D},  
	{0x3D04, 0x6698}, 
	{0x3D06, 0xFFFF},  
	{0x3D08, 0x7783},  
	{0x3D0A, 0x101B},  
	{0x3D0C, 0x732C},  
	{0x3D0E, 0x4230}, 
	{0x3D10, 0x5881}, 
	{0x3D12, 0x5C3A}, 
	{0x3D14, 0x0140}, 
	{0x3D16, 0x2300}, 
	{0x3D18, 0x815F}, 
	{0x3D1A, 0x6789}, 
	{0x3D1C, 0x5920}, 
	{0x3D1E, 0x0C20}, 
	{0x3D20, 0x21C0}, 
	{0x3D22, 0x4684}, 
	{0x3D24, 0x4892}, 
	{0x3D26, 0x1A00}, 
	{0x3D28, 0xBA4C}, 
	{0x3D2E, 0x408C}, 
	{0x3D2A, 0x8D48}, 
	{0x3D2C, 0x4641}, 
	{0x3D30, 0x4784}, 
	{0x3D32, 0x4A87}, 
	{0x3D34, 0x561A}, 
	{0x3D36, 0x00A5}, 
	{0x3D38, 0x1A00}, 
	{0x3D3A, 0x5693}, 
	{0x3D3C, 0x4D8D}, 
	{0x3D3E, 0x4A47}, 
	{0x3D40, 0x4041}, 
	{0x3D42, 0x8200}, 
	{0x3D44, 0x24B7}, 
	{0x3D46, 0x0024}, 
	{0x3D48, 0x8D4F}, 
	{0x3D4A, 0x831A}, 
	{0x3D4C, 0x00B4}, 
	{0x3D4E, 0x4684}, 
	{0x3D50, 0x49CE}, 
	{0x3D52, 0x4946}, 
	{0x3D54, 0x4140}, 
	{0x3D56, 0x9247}, 
	{0x3D58, 0x844B}, 
	{0x3D5A, 0xCE4B}, 
	{0x3D5C, 0x4741}, 
	{0x3D5E, 0x502F}, 
	{0x3D60, 0xBD3A}, 
	{0x3D62, 0x5181}, 
	{0x3D64, 0x5E73}, 
	{0x3D66, 0x7C0A}, 
	{0x3D68, 0x7770}, 
	{0x3D6A, 0x8085}, 
	{0x3D6C, 0x6A82}, 
	{0x3D6E, 0x6742}, 
	{0x3D70, 0x8244},              
	{0x3D72, 0x831A},  
	{0x3D76, 0x44DF},             
	{0x3D78, 0x1A00}, 
	{0x3D7A, 0x8542}, 
	{0x3D7C, 0x8567}, 
	{0x3D7E, 0x826A}, 
	{0x3D80, 0x857C}, 
	{0x3D74, 0x0099}, 
	{0x3D82, 0x6B80}, 
	{0x3D84, 0x7000}, 
	{0x3D86, 0xB831}, 
	{0x3D88, 0x40BE}, 
	{0x3D8A, 0x6700}, 
	{0x3D8C, 0x0CBD}, 
	{0x3D8E, 0x4482}, 
	{0x3D90, 0x7898}, 
	{0x3D92, 0x7480}, 
	{0x3D94, 0x5680}, 
	{0x3D96, 0x9755}, 
	{0x3D98, 0x8057}, 
	{0x3D9A, 0x8056}, 
	{0x3D9C, 0x9256}, 
	{0x3D9E, 0x8057}, 
	{0x3DA0, 0x8055}, 
	{0x3DA2, 0x817C}, 
	{0x3DA4, 0x969B}, 
	{0x3DA6, 0x56A6}, 
	{0x3DA8, 0x44BE}, 
	{0x3DAA, 0x000C}, 
	{0x3DAC, 0x867A}, 
	{0x3DAE, 0x9474}, 
	{0x3DB0, 0x8A79}, 
	{0x3DB2, 0x9367}, 
	{0x3DB4, 0xBF6A}, 
	{0x3DB6, 0x816C}, 
	{0x3DB8, 0x8570}, 
	{0x3DBA, 0x836C}, 
	{0x3DBC, 0x826A}, 
	{0x3DBE, 0x8245}, 
	{0x3DC0, 0xFFFF}, 
	{0x3DC2, 0xFFD6}, 
	{0x3DC4, 0x4582}, 
	{0x3DC6, 0x6A82}, 
	{0x3DC8, 0x6C83}, 
	{0x3DCA, 0x7000}, 
	{0x3DCC, 0x8024}, 
	{0x3DCE, 0xB181}, 
	{0x3DD0, 0x6859}, 
	{0x3DD2, 0x732B}, 
	{0x3DD4, 0x4030}, 
	{0x3DD6, 0x4982}, 
	{0x3DD8, 0x101B}, 
	{0x3DDA, 0x4083}, 
	{0x3DDC, 0x6785}, 
	{0x3DDE, 0x3A00}, 
	{0x3DE0, 0x8820}, 
	{0x3DE2, 0x0C59}, 
	{0x3DE4, 0x8546}, 
	{0x3DE6, 0x8348}, 
	{0x3DEA, 0x8B48}, 
	{0x3DEC, 0x4641}, 
	{0x3DEE, 0x4083}, 
	{0x3DF0, 0x1A00}, 
	{0x3DF2, 0x8347}, 
	{0x3DF4, 0x824A}, 
	{0x3DE8, 0xD04C}, 
	{0x3DF6, 0x9A56}, 
	{0x3DF8, 0x1A00}, 
	{0x3DFA, 0x951A}, 
	{0x3DFC, 0x0056}, 
	{0x3DFE, 0x914D}, 
	{0x3E00, 0x8B4A}, 
	{0x3E02, 0x4700}, 
	{0x3E04, 0x0300}, 
	{0x3E06, 0x2492}, 
	{0x3E08, 0x0024}, 
	{0x3E0A, 0x8A1A}, 
	{0x3E0C, 0x004F}, 
	{0x3E0E, 0xB446}, 
	{0x3E10, 0x8349}, 
	{0x3E12, 0xB249}, 
	{0x3E14, 0x4641}, 
	{0x3E16, 0x408B}, 
	{0x3E18, 0x4783}, 
	{0x3E1A, 0x4BDB}, 
	{0x3E1C, 0x4B47}, 
	{0x3E1E, 0x4180}, 
	{0x3E20, 0x502B}, 
	{0x3E22, 0x4C3A}, 
	{0x3E24, 0x4180}, 
	{0x3E26, 0x737C}, 
	{0x3E28, 0xD124}, 
	{0x3E2A, 0x9068}, 
	{0x3E2C, 0x8A20}, 
	{0x3E2E, 0x2170}, 
	{0x3E30, 0x8081}, 
	{0x3E32, 0x6A67}, 
	{0x3E34, 0x4257}, 
	{0x3E36, 0x5544}, 
	{0x3E38, 0x8644}, 
	{0x3E3A, 0x9755}, 
	{0x3E3C, 0x5742}, 
	{0x3E3E, 0x676A}, 
	{0x3E40, 0x807D}, 
	{0x3E42, 0x3180}, 
	{0x3E44, 0x7000}, 
	{0x3E46, 0x0000}, 
	{0x3E48, 0x0000}, 
	{0x3E4A, 0x0000}, 
	{0x3E4C, 0x0000}, 
	{0x3E4E, 0x0000}, 
	{0x3E50, 0x0000}, 
	{0x3E52, 0x0000}, 
	{0x3E54, 0x0000}, 
	{0x3E56, 0x0000}, 
	{0x3E58, 0x0000}, 
	{0x3E5A, 0x0000},
	{0x3E5E, 0x0000}, 
	{0x3E60, 0x0000},
	{0x3E62, 0x0000},
	{0x3E64, 0x0000},
	{0x3E66, 0x0000},
	{0x3E68, 0x0000},
	{0x3E5C, 0x0000},
	{0x3E6A, 0x0000},
	{0x3E6C, 0x0000},
	{0x3E6E, 0x0000},
	{0x3E70, 0x0000},
	{0x3E72, 0x0000},
	{0x3E74, 0x0000},
	{0x3E76, 0x0000},
	{0x3E78, 0x0000},
	{0x3E7A, 0x0000},
	{0x3E7C, 0x0000},
	{0x3E7E, 0x0000},
	{0x3E80, 0x0000},
	{0x3E82, 0x0000},
	{0x3E84, 0x0000},
	{0x3E86, 0x0000},
	{0x3E88, 0x0000},
	{0x3E8A, 0x0000},
	{0x3E8C, 0x0000},
	{0x3E8E, 0x0000},
	{0x3E90, 0x0000},
	{0x3E92, 0x0000},
	{0x3E94, 0x0000},
	{0x3E96, 0x0000},
	{0x3E98, 0x0000},
	{0x3E9A, 0x0000},
	{0x3E9C, 0x0000},
	{0x3E9E, 0x0000},
	{0x3EA0, 0x0000},
	{0x3EA2, 0x0000},
	{0x3EA4, 0x0000},
	{0x3EA6, 0x0000},
	{0x3EA8, 0x0000},
	{0x3EAA, 0x0000},
	{0x3EAC, 0x0000},
	{0x3EAE, 0x0000},
	{0x3EB0, 0x0000},
	{0x3EB2, 0x0000},
	{0x3EB4, 0x0000},
	{0x3EB6, 0x0000},
	{0x3EB8, 0x0000},
	{0x3EBA, 0x0000},
	{0x3EBC, 0x0000},
	{0x3EBE, 0x0000},
	{0x3EC0, 0x0000},
	{0x3EC2, 0x0000},
	{0x3EC4, 0x0000},
	{0x3EC6, 0x0000},
	{0x3EC8, 0x0000},
	{0x3ECA, 0x0000},


	//Power Mode Context 1 (Normal Timing, Normal Power)
	{0x3EDC, 0x58CF},
	{0x3EDE, 0x2363},
	{0x3EE0, 0xA394},
	{0x3EE2, 0xD963},



	{0x0103, 0x1	},  //Software Reset = 0x1
	//DELAY = 300           
	{0x31AE, 0x301	},  //Serial Format = 0x301
	{0x0112, 0x0C0C},  	//CCP Data Format = 0xC0C
	{0x301A, 0x0010},  	//Reset Register = 0x10
	{0x3064, 0x0805},  	//SMIA Test = 0x805
	{0x301E, 0x00A8},  	//Data Pedestal = 0xA8
	{0x301A, 0x10DC},  	//Reset Register = 0x10DC
	{0x0104, 0x1	},  //Grouped Parameter Hold = 0x1
	{0x0100, 0x0	},  //Mode Select = 0x0

	{0x0300, 0x4	},  //vt_pix_clk_div = 0x4
	{0x0302, 0x01	},  //vt_sys_clk_div = 0x1
	{0x0304, 0x03	},  //pre_pll_clk_div = 0x3
	{0x0306, 0x6E	},  //pll_multiplier = 0x6E
	{0x0308, 0x0C	},  //op_pix_clk_div = 0xC
	{0x030A, 0x01	},  //op_sys_clk_div = 0x1

	{0x3016, 0x111	},  //Row Speed = 0x111
	{0x0344, 0x090	},  //Column Start = 0x90
	{0x0348, 0x11AF},  	//Column End = 0x11AF
	{0x0346, 0x020	},  //Row Start = 0x20
	{0x034A, 0xCF7	},  //Row End = 0xCF7
	{0x3040, 0x0041},  	//Read Mode = 0x41
	{0x0400, 0x0	},  //Scaling Mode = 0x0
	{0x0404, 0x10	},  //Scale_M = 0x10
	{0x034C, 0x1120},  	//Output Width = 0x1120
	{0x034E, 0xCD8	},  //Output Height = 0xCD8
	{0x0342, 0x33C1},  	//Line Length = 0x33C1
	{0x0340, 0x0D67},  	//Frame Lines = 0xD67
	{0x3010, 0x00CF},  	//Fine Correction = 0xCF
	{0x3012, 0x0010},  	//Coarse Integration Time = 0x10
	{0x3014, 0x1F50},  	//Fine Integration Time = 0x1F50
	{0x3018, 0x0000},  	//Extra Delay = 0x0
	//BITFIELD = 0x30D4, 0x6000, 0x0001   //Column Correction, bits 0x6000 = 1
	//BITFIELD = 0x3176, 0x4000, 0x0000   //Fast Timing, bits 0x4000 = 0
	//BITFIELD = 0x3178, 0x4000, 0x0000   //ANALOG_CONTROL5, bits 0x4000 = 0
	//BITFIELD = 0x317C, 0x4000, 0x0001   //Overlap Sampling, bits 0x4000 = 1
	//BITFIELD = 0x3EE8, 0x1, 0x1   //DAC_LD_28_29, bits 0x1 = 1
	//BITFIELD = 0x3EEA, 0x70, 0x07   //DAC_LD_30_31, bits 0x70 = 7
	//BITFIELD = 0x301A, 0x2, 0x1   //Restart Frame, bits 0x2 = 1
	{0x0104, 0x0},	//Grouped Parameter Hold = 0x0
	{0x0100, 0x1},	//Mode Select = 0x1
	{0x0304, 8},
	
	{0x301a, 0x5ccc},   //reset_register       
	{0x3012, 500},
	{0x0206, 33},
	{0x0208, 50},
	{0x020a, 50},
	{0x020c, 33},


	{0xffff, 0xffff},
	{0xffff, 0xffff},
};
#endif




#endif
