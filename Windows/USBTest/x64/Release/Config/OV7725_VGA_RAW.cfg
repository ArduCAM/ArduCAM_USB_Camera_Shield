;**************************************************************************************/
; ----- camera parameter -----
;
; -- Keyname description:
; CFG_MODE  = set the config mode for camera: 0 -> User define(UI)
;											  1 -> This config File
; TYPE      = set the name of the camera module
; VID		= set the Vendor ID of camera
; SIZE		= set the width and height of the image generated by camera 
; BIT_WIDTH = set the bit width of the image generated by camera 
; FORMAT    = set the format of the image generated by camera:
;							 | 0 -> RAW	   | 1 -> RGB565  |	2 -> YUV422   | 3 -> JPG  |
;							 | -- 0 -> RG  | -- 0 -> RGB  | -- 0 -> YUYV  |           |
;							 | -- 1 -> GR  | -- 1 -> BGR  | -- 1 -> YVYU  |           |
;							 | -- 2 -> GB  |              | -- 2 -> UYVY  |           |
;							 | -- 3 -> BG  |              | -- 3 -> VYUY  |           |
; I2C_MODE  = set the bit width of the address and data of I2C communication: 
;																							0 ->  8 bit address &  8 bit value				
;																						  	1 ->  8 bit address & 16 bit value
;																							2 -> 16 bit address &  8 bit value
;																							3 -> 16 bit address & 16 bit value		
; I2C_ADDR  = set the ship address for register config of camera 
; 
; -- Keyname format:
; CFG_MODE  	= <value1>							;<comment>
; TYPE      	= <value1>
; VID			= <vid>
; SIZE			= <width>, <height>
; BIT_WIDTH 	= <bitWidth>
; FORMAT    	= <value1>[, <value2>]
; I2C_MODE  	= <value1>
; I2C_ADDR  	= <i2cAddress> 
;
; <valueN>		Index value representing certain meanings 
; <vid>			Vendor ID of the camera
; <width>		Width of the image generated by camera
; <height>		Height of the image generated by camera
; <bitWidth>	Bit width of the image generated by camera
; <i2cAddress>	Ship address for register config of camera
; <comment>    	Some form of C-style comments are supported in this .cfg file
;
;**************************************************************************************/
[camera parameter]
CFG_MODE  = 1	
TYPE      = OV7725
VID	      = 0x52cb										
SIZE      = 640, 480
BIT_WIDTH = 8 
FORMAT    = 0, 0	
I2C_MODE  = 0					
I2C_ADDR  = 0x42					


;**************************************************************************************/
; ----- board parameter -----
;
; -- Keyname description:
; VRCMD = set board parameter by vendor command 
; 
; -- Keyname format:
; VRCMD = <command>, <value>, <index>, <dataNumber>[, <data1>[, <data2>[, <data3>[, <data4>]]]] 		//<comment>
;
; <command>     
; <value>      
; <index>         
; <dataNumber>  
; <dataN>      
; <comment>    Some form of C-style comments are supported in this .cfg file
;
;**************************************************************************************/
[board parameter]
VRCMD = 0xD7, 0x4600, 0x0100, 1, 0x05
VRCMD = 0xF6, 0x0000, 0x0000, 3, 0x03, 0x04, 0x0C

;**************************************************************************************/
; ----- register parameter -----
;
; -- Keyname description:
; REG    = assign a new register value
; DELAY  = delay a certain amount of milliseconds before continuing
; BITSET = do a set operation to part of a register. The part is defined as a mask.
; BITCLR = do a reset operation to part of a register. The part is defined as a mask.
;
; -- Keyname format:
; REG    = [<page>,] <address>, <value>             //<comment>
; DELAY  = <milliseconds>
; BITSET = [<page>,] <address>, <mask>
; BITCLR = [<page>,] <address>, <mask>
;
; <page>         Optional address space for this register. Some sensors (mostly SOC's)
;                have multiple register pages (see the sensor spec or developers guide)
; <address>      the register address
; <value>        the new value to assign to the register
; <mask>         is the part of a register value that needs to be updated with a new value
; <milliseconds> wait for this ammount of milliseconds before continuing 
; <comment>      Some form of C-style comments are supported in this .cfg file
;
;**************************************************************************************/
[register parameter]
          
REG = 0x12,0x80		// BIT[7]-Reset all the Reg 
	//Write Data Index
REG = 0x3d, 0x03	//DC offset for analog process
REG = 0x15, 0x02	//COM10: href/vsync/pclk/data reverse(Vsync H valid)
REG = 0x17, 0x22	//VGA:	0x22;	QVGA:	0x3f;
REG = 0x18, 0xa4	//VGA:	0xa4;	QVGA:	0x50;
REG = 0x19, 0x07	//VGA:	0x07;	QVGA:	0x03;
REG = 0x1a, 0xf0	//VGA:	0xf0;	QVGA:	0x78;
REG = 0x32, 0x00	//Bit[7]:Mirror image edge alignment 
REG = 0x29, 0xA0	//VGA:	0xA0;	QVGA:	0xF0
REG = 0x2C, 0xF0	//VGA:	0xF0;	QVGA:	0x78
REG = 0x0d, 0x41	//PLL 4x
REG = 0x11, 0x00	//CLKRC,Finternal clock = Finput clk*PLL multiplier/[(CLKRC[5:0]+1)*2] = 25MHz*4/[(x+1)*2]
															//00: 50fps, 01:25fps, 03:12.5fps	(50Hz Fliter)
REG = 0x12, 0x03	//BIT[6]:	0:VGA; 1;QVGA
															//VGA:	00:YUV; 01:Processed Bayer RGB; 10:RGB;	11:Bayer RAW; BIT[7]-Reset all the Reg 
REG = 0x0c, 0x10	//COM3: Bit[6]:Horizontal mirror image ON/OFF, Bit[0]:Color bar; Default:0x10
	//DSP control
REG = 0x42, 0x7f	//BLC Blue Channel Target Value, Default: 0x80
REG = 0x4d, 0x09	//BLC Red Channel Target Value, Default: 0x80
REG = 0x63, 0xf0	//AWB Control
REG = 0x64, 0xff	//DSP_Ctrl1:
REG = 0x65, 0x00	//DSP_Ctrl2:	
REG = 0x66, 0x00	//{COM3[4](0x0C), DSP_Ctrl3[7]}:00:YUYV;	01:YVYU;	[10:UYVY]	11:VYUY	
REG = 0x67, 0x02	//DSP_Ctrl4:[1:0]00/01: YUV or RGB; 10: RAW8; 11: RAW10	
	
  //AGC AEC AWB
REG = 0x13, 0xff
REG = 0x0f, 0xc5
REG = 0x14, 0x11
REG = 0x22, 0x98	//Banding Filt er Minimum AEC Value; Default: 0x09
REG = 0x23, 0x03	//Banding Filter Maximum Step
REG = 0x24, 0x40	//AGC/AEC - Stable Operating Region (Upper Limit)
REG = 0x25, 0x30	//AGC/AEC - Stable Operating Region (Lower Limit)
REG = 0x26, 0xa1	//AGC/AEC Fast Mode Operating Region
REG = 0x2b, 0x9e	//TaiWan: 0x00:60Hz Filter; Mainland: 0x9e:50Hz Filter
REG = 0x6b, 0xaa	//AWB Control 3
REG = 0x13, 0xff	//0xff: AGC AEC AWB Enable; 0xf0: AGC AEC AWB Disable;
	
	//matrix sharpness brightness contrast UV	
REG = 0x90, 0x0a	
REG = 0x91, 0x01
REG = 0x92, 0x01
REG = 0x93, 0x01
REG = 0x94, 0x5f
REG = 0x95, 0x53
REG = 0x96, 0x11
REG = 0x97, 0x1a
REG = 0x98, 0x3d
REG = 0x99, 0x5a
REG = 0x9a, 0x1e
REG = 0x9b, 0x3f	//Brightness 
REG = 0x9c, 0x25
REG = 0x9e, 0x81	
REG = 0xa6, 0x06
REG = 0xa7, 0x65
REG = 0xa8, 0x65
REG = 0xa9, 0x80
REG = 0xaa, 0x80
	
	//Gamma correction
REG = 0x7e, 0x0c
REG = 0x7f, 0x16	//
REG = 0x80, 0x2a
REG = 0x81, 0x4e
REG = 0x82, 0x61
REG = 0x83, 0x6f
REG = 0x84, 0x7b
REG = 0x85, 0x86
REG = 0x86, 0x8e
REG = 0x87, 0x97
REG = 0x88, 0xa4
REG = 0x89, 0xaf
REG = 0x8a, 0xc5
REG = 0x8b, 0xd7
REG = 0x8c, 0xe8
REG = 0x8d, 0x20